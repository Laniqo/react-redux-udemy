[{"C:\\Users\\william.young\\Desktop\\React-Redux\\widgets\\src\\index.js":"1","C:\\Users\\william.young\\Desktop\\React-Redux\\widgets\\src\\App.js":"2","C:\\Users\\william.young\\Desktop\\React-Redux\\widgets\\src\\components\\Accordion.js":"3","C:\\Users\\william.young\\Desktop\\React-Redux\\widgets\\src\\components\\Search.js":"4","C:\\Users\\william.young\\Desktop\\React-Redux\\widgets\\src\\components\\Dropdown.js":"5"},{"size":156,"mtime":1612334696649,"results":"6","hashOfConfig":"7"},{"size":1350,"mtime":1613007255279,"results":"8","hashOfConfig":"7"},{"size":1331,"mtime":1612335008966,"results":"9","hashOfConfig":"7"},{"size":4045,"mtime":1612662089433,"results":"10","hashOfConfig":"7"},{"size":1878,"mtime":1613007421196,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"17kkytx",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\william.young\\Desktop\\React-Redux\\widgets\\src\\index.js",[],["24","25"],"C:\\Users\\william.young\\Desktop\\React-Redux\\widgets\\src\\App.js",["26","27","28","29"],"C:\\Users\\william.young\\Desktop\\React-Redux\\widgets\\src\\components\\Accordion.js",[],"C:\\Users\\william.young\\Desktop\\React-Redux\\widgets\\src\\components\\Search.js",["30"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n//functional component\r\n//use Hooks, not lifecycle methods.\r\nconst Search = () => {\r\n\r\n    //States\r\n    const [term, setTerm] = useState('');\r\n    const [debouncedTerm, setDebouncedTerm] = useState(term);\r\n    const [results, setResults] = useState([]);\r\n\r\n    //useEffect is a React Hook\r\n    //run the function at initial render, ever re-render of the component and everytime \"term\" has changed:\r\n    //this is being invoked when a letter is entered in the search field because\r\n    //the setTerm function re-renders the component\r\n    useEffect(() => {\r\n\r\n        //only update the debouncedTerm every 750ms\r\n        const timerId = setTimeout(() => {\r\n            setDebouncedTerm(term);\r\n\r\n        }, 750); //wait 750ms \r\n\r\n        \r\n        //clean up function\r\n        //gets called on the 2nd time the useEffect function is invoked\r\n        //before all other code in the useEffect function is executed\r\n        return () => {\r\n            clearTimeout(timerId);\r\n        };\r\n    }, [term]); //passing value of term to re-render page everytime it updates\r\n\r\n    //useEffect for debouncedTerm\r\n    //gets invoked every time term is updated but only after 750ms, then hits the API\r\n    //first argument is a function but cannot use async-await on it so need to implement aync-awant inside the function\r\n    //& use an IIFE or calling the function from within after it's implemented\r\n    useEffect(() => {\r\n\r\n            //only hit the API if term is not empty \r\n            if(term){\r\n                //IIFE invoked automatically\r\n                (async () => {\r\n                    const {data} = await axios.get(\"https://en.wikipedia.org/w/api.php\",\r\n                    {\r\n                        params: {\r\n                            action: \"query\",\r\n                            list: \"search\",\r\n                            format: \"json\",\r\n                            origin: \"*\", //allow anonymous\r\n                            srsearch: debouncedTerm \r\n                        }\r\n                    });\r\n                    \r\n                    console.log(\"Data\", data);\r\n                    \r\n                    //updates the 'results' state with the returned recommendations from the API\r\n                    setResults(data.query.search);\r\n                })();\r\n            }\r\n    }, [debouncedTerm]);//if debouncedTerm gets updated with te same value, then it will not invoke useEffect\r\n\r\n\r\n\r\n\r\n\r\n    /* ************************ RENDER ***************************** */\r\n    //function to render all search results\r\n    const renderedResults = results.map((result) => {\r\n        return (\r\n            <div key={result.pageid} className=\"item\">\r\n                <div className=\"right floated content\">\r\n                    <a className=\"ui button\"\r\n                       href={`https://en.wikipedia.org?curid=${result.pageid}`}\r\n                       >Go</a>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <div className=\"header\">\r\n                        {result.title}\r\n                    </div>\r\n                    <span dangerouslySetInnerHTML={{ __html: result.snippet}}></span>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>   \r\n            <div className=\"ui form\">\r\n                <div className=\"field\">\r\n                    <label> Enter Search Term </label>\r\n                    {/* every letter, update value of term and print it back\r\n                        into the input field.\r\n                        Everytime setTerm is called, the component is re-rendered */}\r\n\r\n                    <input \r\n                    value={term}\r\n                    onChange={e => setTerm(e.target.value)}\r\n                    className=\"input\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"ui celled list\">\r\n                {renderedResults}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;","C:\\Users\\william.young\\Desktop\\React-Redux\\widgets\\src\\components\\Dropdown.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":2,"column":8,"nodeType":"37","messageId":"38","endLine":2,"endColumn":17},{"ruleId":"35","severity":1,"message":"39","line":3,"column":8,"nodeType":"37","messageId":"38","endLine":3,"endColumn":14},{"ruleId":"35","severity":1,"message":"40","line":7,"column":7,"nodeType":"37","messageId":"38","endLine":7,"endColumn":12},{"ruleId":"41","severity":1,"message":"42","line":37,"column":1,"nodeType":"43","endLine":54,"endColumn":7},{"ruleId":"44","severity":1,"message":"45","line":61,"column":8,"nodeType":"46","endLine":61,"endColumn":23,"suggestions":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'Accordion' is defined but never used.","Identifier","unusedVar","'Search' is defined but never used.","'items' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'term'. Either include it or remove the dependency array.","ArrayExpression",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [debouncedTerm, term]",{"range":"53","text":"54"},[2390,2405],"[debouncedTerm, term]"]